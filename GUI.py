from pycaret.regression import load_model as load_regression_modelfrom pycaret.classification import load_model as load_classification_modelimport itertoolsimport streamlit as stimport pandas as pdimport numpy as npfrom PIL import Image# 读取数据集df = pd.read_csv('/mnt/Dataset.csv')# Page configurationst.set_page_config(    page_title='Prediction of dropout risk assessment for domestic and international students',    layout='wide',    initial_sidebar_state='expanded')# Title of the app centered with HTML and CSSst.markdown("""    <style>   .center - content {        text - align: center;    }    </style>    <h1 style='color: darkblue;' class='center - content'>Prediction of dropout risk assessment for domestic and international students</h1>  """, unsafe_allow_html=True)st.write(' ')# Additional info centeredst.markdown("""    <div class='center - content'>    Developed by Dr. Songbo Wang et al., Hubei University of Technology; The University of Edinburgh.<br>    Email: Wangsongbo@hbut.edu.cn;    </div> """, unsafe_allow_html=True)st.write(' ')# Open and resize the image# 由于这里没有实际图片，你可以根据实际情况调整# image = Image.open("Figure 4 - .jpg")# resized_image = image.resize((430, 200))# Display the image centered# st.image(resized_image, use_column_width=False)# Input widgetsst.sidebar.subheader('Input features for single prediction')input_features = {}# 排除 Target 列columns_to_use = [col for col in df.columns if col != 'Target']for col in columns_to_use:    min_value = float(df[col].min())    max_value = float(df[col].max())    default_value = float(df[col].mean())    input_features[col] = st.sidebar.number_input(col, min_value=min_value, max_value=max_value, value=default_value)# Load Models# 这里需要确保文件路径正确，如果是相对路径，要保证文件在正确的目录下tuned_best_classification = load_classification_model('best_model')# Button to trigger single predictionsif st.sidebar.button('Predict'):    st.markdown("<h1 style='color: blue; font - size: 24px;'>Predicted result:</h1>", unsafe_allow_html=True)    new_data = pd.DataFrame([input_features])    predictions_Target = tuned_best_classification.predict(new_data)    new_data['Target'] = predictions_Target    st.write(new_data)# Batch predictionst.sidebar.subheader('Batch Prediction')uploaded_file = st.sidebar.file_uploader("Upload your input CSV file", type=["csv"])if uploaded_file is not None:    st.markdown("<h1 style='color: blue; font - size: 24px;'>Predicted results:</h1>", unsafe_allow_html=True)    input_df = pd.read_csv(uploaded_file)    # 简单校验输入数据的列名是否正确    required_columns = columns_to_use    if not all(col in input_df.columns for col in required_columns):        st.error('输入的 CSV 文件缺少必要的列')    else:        predictions_Target = tuned_best_classification.predict(input_df)        input_df['Target'] = predictions_Target        st.write(input_df)